name: Create Branch Workflow

on: workflow_dispatch
#on: create

jobs:

 # build-and-deploy-on-Azure:
 #   runs-on: ubuntu-latest
    
 #   steps:
 #   - name: Azure Login
 #     uses: azure/login@v1
 #     with:
 #       creds: ${{ secrets.AZURE_CREDENTIALS }}

 #   - name: Checkout
 #     uses: actions/checkout@v1

  #  - name: Create Postgres Server
  #    run: |
  #      bash actions/create_db.sh


  create-namespace:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: p-cvjff
      CLUSTER_ID: c-zkg5f
    
    steps:
    - name: Get Kubectl
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
        
    - name: Create Namespace
      run: |
          NAMESPACE=$(echo ${GITHUB_REF##*/} | sed -e s/[\/_]/-/g | sed -e 's/\(.*\)/\L\1/g')
          if kubectl get namespace $NAMESPACE &> /dev/null; then 
            echo "Namespace already exists" 
          else 
            kubectl create namespace $NAMESPACE
            kubectl label namespaces $NAMESPACE istio-injection=enabled --overwrite=true
            kubectl label namespaces $NAMESPACE field.cattle.io/projectId=${{ env.PROJECT_ID }} --overwrite=true
            kubectl annotate namespaces $NAMESPACE field.cattle.io/projectId=${{ env.CLUSTER_ID }}:${{ env.PROJECT_ID }}
          fi
          
  checkout-update-app:
    runs-on: ubuntu-latest
    needs: [create-namespace]
    steps:
    - name: install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --version

    - uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY_APP }}
        persist-credentials: true
        repository: infologistix/petclinic-app-gcp

    - uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        credentials_json: ${{ secrets.GCLOUD_JSON }}

    - name: Update Helm Repo for App
      run: |
        touch test.txt     # This and the next line is for text to avoid nothing to commit error
        echo "another boring line" >> test.txt
        echo "You are on the Branch ${GITHUB_REF##*/}"
        export HOST=$(gcloud sql instances describe postgres-feature | grep ipAddress | tail -1 | awk '{print $NF}')
        export NAMESPACE=$(echo ${GITHUB_REF##*/} | sed -e s/[\/_]/-/g | sed -e 's/\(.*\)/\L\1/g')
        export RELEASENAME=petclinic-${GITHUB_REF##*/}
        echo "The host of the DB is pg-server-$RandomID"
        echo "The namespace in fleet.yaml is $NAMESPACE"
        yq -i eval '.deployment.datasource.db_host=env(HOST)' charts/values.yaml
        yq -i eval '.defaultNamespace=env(NAMESPACE)' charts/fleet.yaml
        yq -i eval '.namespace=env(NAMESPACE)' charts/fleet.yaml
        yq -i eval '.helm.releaseName=env(RELEASENAME)' charts/fleet.yaml
        cat charts/fleet.yaml
        echo ---------------------------------------------------
        cat charts/values.yaml

    - name: Commit files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add charts/values.yaml charts/fleet.yaml
        git commit -m "values in chart for ${GITHUB_REF##*/} updated"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        branch: ${{ github.ref }}<
        repository: infologistix/petclinic-app-gcp

