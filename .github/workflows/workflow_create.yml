name: Create Branch Workflow

on: create

jobs:

  build-and-deploy-on-google:
    runs-on: ubuntu-latest
    env:
      REGION: europe-west3
      TIER: db-f1-micro
    
    steps:
    - uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY_APP }}
        persist-credentials: true
        repository: infologistix/petclinic-app-gcp

    - uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        credentials_json: ${{ secrets.GCLOUD_JSON }}

    - name: Create Postgres Server
      run: |
        export NAME=postgres-${GITHUB_REF##*/}
        echo "Create Postgres Instance"
        gcloud sql instances create $NAME \
          --database-version=POSTGRES_15 \
          --region=${{ env.REGION }} \
          --tier=${{ env.TIER }}  \
          --edition=ENTERPRISE \
          --network=vpc-network \
          --enable-google-private-path
        echo "Set a user password"
        gcloud sql users set-password postgres \
          --instance $NAME \
          --password=password123


  create-namespace-and-endpoint:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: p-lcpdc
      CLUSTER_ID: c-mqkfg

    steps:
    - name: Get Kubectl
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
        
    - name: Set the environment variable
      run: |
        echo NAMESPACE=$(echo ${GITHUB_REF##*/} | sed -e s/[\/_]/-/g | sed -e 's/\(.*\)/\L\1/g') >> $GITHUB_ENV
        
    - name: create namespace
      run: |
        if kubectl get namespace ${{ env.NAMESPACE }} &> /dev/null; then 
          echo "Namespace already exists" 
        else 
          kubectl create namespace ${{ env.NAMESPACE }}
          kubectl label namespaces ${{ env.NAMESPACE }} istio-injection=enabled --overwrite=true
          kubectl label namespaces ${{ env.NAMESPACE }} field.cattle.io/projectId=${{ env.PROJECT_ID }} --overwrite=true
          kubectl annotate namespaces ${{ env.NAMESPACE }} field.cattle.io/projectId=${{ env.CLUSTER_ID }}:${{ env.PROJECT_ID }}
        fi          
        cat <<'YAML' | kubectl apply -f -
        apiVersion: v1
        data:
          .dockerconfigjson: ${{ secrets.REGISTRYSECRET }}
        kind: Secret
        metadata:
          name: registry            
          namespace: ${{ env.NAMESPACE }}
        type: kubernetes.io/dockerconfigjson
        YAML

    - uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        credentials_json: ${{ secrets.GCLOUD_JSON }}

    - name: create endpoint
      run: |
        export GCLB_IP=$(gcloud compute addresses describe e2m-gclb-ip --format "value(address)" --global)
        export RELEASENAME=petclinic-${GITHUB_REF##*/}
        export PROJECT=${{ secrets.PROJECT_ID }}
        echo $GCLB_IP
        echo $RELEASENAME
        cat <<EOF > dns-spec.yaml
        swagger: "2.0"
        info:
          description: "Cloud Endpoints DNS"
          title: "Cloud Endpoints DNS"
          version: "1.0.0"
        paths: {{ \${} }}
        host: "${RELEASENAME}.endpoints.${PROJECT}.cloud.goog"
        x-google-endpoints:
        - name: "${RELEASENAME}.endpoints.${PROJECT}.cloud.goog"
          target: "${GCLB_IP}"
        EOF
        cat dns-spec.yaml
        gcloud endpoints services deploy dns-spec.yaml
          
  checkout-update-app:
    runs-on: ubuntu-latest
    needs: [create-namespace-and-endpoint, build-and-deploy-on-google]
    steps:
    - name: install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --version

    - uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY_APP }}
        persist-credentials: true
        repository: infologistix/petclinic-app-gcp

    - uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        credentials_json: ${{ secrets.GCLOUD_JSON }}

    - name: Update Helm Repo for App
      run: |
        touch test.txt     # This and the next line is for text to avoid nothing to commit error
        echo "another boring line" >> test.txt
        echo "You are on the Branch ${GITHUB_REF##*/}"
        export BRANCH=${GITHUB_REF##*/}
        export HOST=$(gcloud sql instances list --filter=name:postgres-$BRANCH --format="value(PRIVATE_ADDRESS)")
        echo the host is $HOST
        export JDBC_URL="jdbc:postgresql://$HOST:5432/postgres"
        export NAMESPACE=$(echo ${GITHUB_REF##*/} | sed -e s/[\/_]/-/g | sed -e 's/\(.*\)/\L\1/g')
        export RELEASENAME=petclinic-${GITHUB_REF##*/}
        yq -i eval '.deployment.datasource.db_host=env(HOST)' charts/values.yaml
        yq -i eval '.deployment.datasource.jdbc_url=env(JDBC_URL)' charts/values.yaml
        yq -i eval '.deployment.image.tag=env(BRANCH)' charts/values.yaml
        yq -i eval '.defaultNamespace=env(NAMESPACE)' charts/fleet.yaml
        yq -i eval '.namespace=env(NAMESPACE)' charts/fleet.yaml
        yq -i eval '.helm.releaseName=env(RELEASENAME)' charts/fleet.yaml
        cat charts/fleet.yaml
        echo ---------------------------------------------------
        cat charts/values.yaml

    - name: Commit files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add charts/values.yaml charts/fleet.yaml test.txt
        git commit -m "values in chart for ${GITHUB_REF##*/} updated"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        branch: ${{ github.ref }}
        repository: infologistix/petclinic-app-gcp

        
  checkout-update-fleet-repo:
    runs-on: ubuntu-latest
    needs: [checkout-update-app, build-and-deploy-on-google]
    env:
      BRANCH: ${GITHUB_REF##*/}
      NAME: fleet-job-${GITHUB_REF##*/}
      RELEASENAME: petclinic-${GITHUB_REF##*/}

    steps:
    - name: Set the environment variable
      run: |
        echo BRANCH=${GITHUB_REF##*/} >> $GITHUB_ENV
        echo NAME=fleet-job-${GITHUB_REF##*/} >> $GITHUB_ENV
        echo RELEASENAME=fleet-${GITHUB_REF##*/} >> $GITHUB_ENV
        
    - name: Checkout
      run: |
        eval `ssh-agent -s`
        ssh-add - <<< '${{ secrets.SSH_PRIVATE_KEY_FLEET }}'
        git clone git@github.com:infologistix/petclinic-fleet-gcp.git
        ls

    - name: install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --version

    - name: Overwrite values
      run: |
        cd petclinic-fleet-gcp
        mkdir -p $BRANCH
        cp -r main/* $BRANCH
        cd $BRANCH
        yq -i '.name=strenv(NAME)' values.yml
        yq -i '.branch=strenv(BRANCH)' values.yml
        yq -i '.helm.releaseName=strenv(RELEASENAME)' fleet.yaml
        yq -i '.helm.values.name=strenv(NAME)' fleet.yaml
        yq -i '.helm.values.branch=strenv(BRANCH)' fleet.yaml

    - name: Commit Changes for Fleet
      run: |
        cd petclinic-fleet-gcp
        touch test.txt     # This and the next line is for text to avoid nothing to commit error
        echo "another boring line" >> test.txt
        eval "$(ssh-agent -s)"
        ssh-add - <<< '${{ secrets.SSH_PRIVATE_KEY_FLEET }}'
        RandomID=$(cksum <<< ${GITHUB_REF##*/} | cut -f 1 -d ' ')
        echo "$RandomID github-actions[bot] pushes to Branch ${BRANCH}" 
        git config --local user.email "$RandomID+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add $BRANCH test.txt
        git commit -m "values for branch ${GITHUB_REF##*/} updated"
        git push

